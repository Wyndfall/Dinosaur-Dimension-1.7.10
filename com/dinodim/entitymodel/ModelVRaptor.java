// Date: 9/1/2015 4:47:18 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package com.dinodim.entitymodel;

import org.lwjgl.opengl.GL11;

import com.dinodim.main.DDUtils;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLiving;
import net.minecraft.util.MathHelper;

public class ModelVRaptor extends ModelBase
{
	//fields
	ModelRenderer body;
	ModelRenderer leg1;
	ModelRenderer leg1b;
	ModelRenderer leg1c;
	ModelRenderer leg2;
	ModelRenderer leg2b;
	ModelRenderer leg2c;
	ModelRenderer tail1;
	ModelRenderer tail2;
	ModelRenderer tail3;
	ModelRenderer arm1;
	ModelRenderer arm2;
	ModelRenderer head;
	ModelRenderer neck;
	ModelRenderer[] leg1Parts = new ModelRenderer[3];
	ModelRenderer[] leg2Parts = new ModelRenderer[3];
	ModelRenderer[] tailParts = new ModelRenderer[3];
	static float rad90deg = DDUtils.degToRad(90F); // 90 degrees as converted to radians
	static float rad20deg = DDUtils.degToRad(20F); // 20 degrees in radian form
	static float legOffset = DDUtils.degToRad(-45F);

	public ModelVRaptor()
	{
		textureWidth = 64;
		textureHeight = 32;

		body = new ModelRenderer(this, 40, 12);
		body.addBox(-3F, -2F, -2F, 6, 7, 5);
		body.addBox(-3F, -6F, -1F, 6, 5, 5);
		body.setRotationPoint(0F, 12F, -2F);
		body.setTextureSize(64, 32);
		body.mirror = false;
		DDUtils.setRotation(body, rad90deg, 0F, 0F);

		leg1 = new ModelRenderer(this, 10, 0);
		leg1.addBox(-2F, 0F, -2F, 2, 5, 4);
		leg1.addBox(-2F, 5F, -2F, 2, 2, 7);
		leg1.setRotationPoint(-3F, 10F, 0F);
		leg1.setTextureSize(64, 32);
		leg1.mirror = false;
		DDUtils.setRotation(leg1, 0F, 0F, 0F);
		leg1b = new ModelRenderer(this, 0, 0);
		leg1b.addBox(-2F, 7F, 1F, 2, 5, 2);
		leg1b.setRotationPoint(-3F, 10F, 0F);
		leg1b.setTextureSize(64, 32);
		leg1b.mirror = false;
		DDUtils.setRotation(leg1b, DDUtils.degToRad(20F), 0F, 0F);
		leg1c = new ModelRenderer(this, 0, 0);
		leg1c.addBox(-2F, 5F, 9F, 2, 7, 2);
		leg1c.setRotationPoint(-3F, 10F, 0F);
		leg1c.setTextureSize(64, 32);
		leg1c.mirror = false;
		DDUtils.setRotation(leg1c, DDUtils.degToRad(-30F), 0F, 0F);

		leg2 = new ModelRenderer(this, 10, 0);
		leg2.addBox(0F, 0F, -2F, 2, 5, 4);
		leg2.addBox(0F, 5F, -2F, 2, 2, 7);
		leg2.setRotationPoint(3F, 10F, 0F);
		leg2.setTextureSize(64, 32);
		leg2.mirror = true;
		DDUtils.setRotation(leg2, 0F, 0F, 0F);
		leg2b = new ModelRenderer(this, 0, 0);
		leg2b.addBox(0F, 7F, 1F, 2, 5, 2);
		leg2b.setRotationPoint(3F, 10F, 0F);
		leg2b.setTextureSize(64, 32);
		leg2b.mirror = true;
		DDUtils.setRotation(leg2b, DDUtils.degToRad(20F), 0F, 0F);
		leg2c = new ModelRenderer(this, 0, 0);
		leg2c.addBox(0F, 5F, 9F, 2, 7, 2);
		leg2c.setRotationPoint(3F, 10F, 0F);
		leg2c.setTextureSize(64, 32);
		leg2c.mirror = true;
		DDUtils.setRotation(leg2c, DDUtils.degToRad(-30F), 0F, 0F);

		tail1 = new ModelRenderer(this, 14, 23);
		tail1.addBox(-2F, 0F, -2F, 4, 6, 3);
		tail1.setRotationPoint(0F, 11F, 3F);
		tail1.setTextureSize(64, 32);
		tail1.mirror = true;
		DDUtils.setRotation(tail1, rad90deg, 0F, 0F);
		tail2 = new ModelRenderer(this, 5, 22);
		tail2.addBox(-1F, 0F, -1F, 2, 8, 2);
		tail2.setRotationPoint(0F, 17F, 2F); // arg1 is side-to-side, arg2 was 11F, arg3 is up-down
		tail2.setTextureSize(64, 32);
		tail2.mirror = true;
		DDUtils.setRotation(tail2, rad90deg, 0F, 0F); //arg3 was 0F
		tail3 = new ModelRenderer(this, 0, 23);
		tail3.addBox(-0.5F, 0F, 0F, 1, 8, 1);
		tail3.setRotationPoint(0F, 25F, 2F); //arg3 was 17F, arg1 was 0F
		tail3.setTextureSize(64, 32);
		tail3.mirror = true;
		DDUtils.setRotation(tail3, rad90deg, 0F, 0F); //arg2 was 0F
		arm1 = new ModelRenderer(this, 0, 0);
		arm1.addBox(-2F, 0F, -1F, 2, 9, 2);
		arm1.setRotationPoint(-3F, 9F, -6F);
		arm1.setTextureSize(64, 32);
		arm1.mirror = true;
		DDUtils.setRotation(arm1, -0.6981317F, 0F, 0F);
		arm2 = new ModelRenderer(this, 0, 0);
		arm2.addBox(0F, 0F, -1F, 2, 9, 2);
		arm2.setRotationPoint(3F, 9F, -6F);
		arm2.setTextureSize(64, 32);
		arm2.mirror = true;
		DDUtils.setRotation(arm2, -0.6981317F, 0F, 0F);
		head = new ModelRenderer(this, 24, 12);
		head.addBox(-2F, -1F, -3F, 4, 7, 3);
		head.setRotationPoint(0F, 4F, -9F);
		head.setTextureSize(64, 32);
		head.mirror = true;
		DDUtils.setRotation(head, -rad90deg, 0F, 0F);
		neck = new ModelRenderer(this, 14, 12);
		neck.addBox(-1F, -1F, 0F, 2, 8, 2);
		neck.setRotationPoint(0F, 11F, -8F);
		neck.setTextureSize(64, 32);
		neck.mirror = true;
		DDUtils.setRotation(neck, DDUtils.degToRad(-180F), 0F, 0F);

		//childs
		DDUtils.convertToChild(tail2, tail3);
		DDUtils.convertToChild(tail1, tail2);
	}

	@Override
	public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
	{
		super.render(entity, f, f1, f2, f3, f4, f5);
		setRotationAngles(f, f1, f2, f3, f4, f5, entity);
		if (this.isChild)
	    {
	        float f6 = 2.0F;
	        GL11.glPushMatrix();
	        GL11.glScalef(1.0F / f6, 1.0F / f6, 1.0F / f6);
	        GL11.glTranslatef(0.0F, 24.0F * f5, 0.0F);
	        body.render(f5);
			leg1.render(f5);
			leg1b.render(f5);
			leg1c.render(f5);
			leg2.render(f5);
			leg2b.render(f5);
			leg2c.render(f5);
			tail1.render(f5); // parent to tail2, tail3
			arm1.render(f5);
			arm2.render(f5);
			head.render(f5);
			neck.render(f5);
	        GL11.glPopMatrix();
	    }
	    else
	    {
	    	body.render(f5);
			leg1.render(f5);
			leg1b.render(f5);
			leg1c.render(f5);
			leg2.render(f5);
			leg2b.render(f5);
			leg2c.render(f5);
			tail1.render(f5); // parent to tail2, tail3
			arm1.render(f5);
			arm2.render(f5);
			head.render(f5);
			neck.render(f5);
	    }
		
	}

	@Override
	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity e)
	{
		super.setRotationAngles(f, f1, f2, f3, f4, f5, e); 
		float tailY = (DDUtils.degToRad(MathHelper.cos((e.ticksExisted + e.getEntityId()) * 0.9F) * 4F)); //inner float controls speed, outer float controls angle
		float legX1 = (MathHelper.cos(f * 0.5662F) * 1.2F * f1) + this.legOffset; // inner float was 0.6662F
		float legX2 = (MathHelper.cos(f * 0.5662F + (float)Math.PI) * 1.2F * f1) + this.legOffset;
		this.tail1.rotateAngleY = this.tail2.rotateAngleY = this.tail3.rotateAngleY = tailY;
		this.leg1.rotateAngleX = legX1;
		this.leg1b.rotateAngleX = legX1 - this.legOffset - this.rad20deg;
		this.leg1c.rotateAngleX = legX1 - this.rad20deg;
		this.leg2.rotateAngleX = legX2;
		this.leg2b.rotateAngleX = legX2 - this.legOffset - this.rad20deg;
		this.leg2c.rotateAngleX = legX2 - this.rad20deg;
	}
}
